To create a WPF application that demonstrates data binding, we'll build a simple to-do list application. This application will allow users to add, edit, and remove tasks using data binding.

Step 1: Create a New WPF Project

Open Visual Studio or your preferred C# development environment.

Create a new WPF App (.NET Core) project:

Go to "File" > "New" > "Project..."
Search for "WPF App (.NET Core)" or a similar option.
Give your project a name (e.g., "ToDoListApp") and choose a location.
Click "Create" or "OK" to create the project.
Step 2: Understanding Data Binding in WPF

Data binding in WPF allows UI elements to automatically synchronize with data sources. In our scenario, the data source will be a collection of tasks. Changes made in the UI (e.g., adding or editing a task) will automatically update the data source, and vice versa.

Step 3: Create a Data Source

Create a C# class to represent a task:

csharp
Copy code
// Task.cs
using System.ComponentModel;

public class Task : INotifyPropertyChanged
{
    private string description;
    public string Description
    {
        get { return description; }
        set
        {
            description = value;
            OnPropertyChanged("Description");
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
Create another class to manage the collection of tasks:

csharp
Copy code
// TaskManager.cs
using System.Collections.ObjectModel;

public class TaskManager
{
    public ObservableCollection<Task> Tasks { get; } = new ObservableCollection<Task>();
}
Step 4: Design the User Interface with XAML

Design the UI of your WPF application using XAML. Here's a basic design for our to-do list application:

In Solution Explorer, open the "MainWindow.xaml" file.

Replace the existing XAML code with the following XAML code:

xml
Copy code
<Window x:Class="ToDoListApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="To-Do List" Width="400" Height="300">
    <Grid>
        <TextBox Name="taskTextBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="250" Margin="10,10,0,0" PlaceholderText="Enter a task description"/>
        <Button Content="Add" HorizontalAlignment="Left" VerticalAlignment="Top" Width="80" Height="30" Margin="270,10,0,0" Click="AddTask_Click"/>
        <ListView Name="taskListView" HorizontalAlignment="Left" VerticalAlignment="Top" Width="350" Height="200" Margin="10,50,0,0">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Tasks" Width="300" DisplayMemberBinding="{Binding Description}"/>
                </GridView>
            </ListView.View>
        </ListView>
    </Grid>
</Window>
In the XAML code above, we have a TextBox for entering task descriptions, an "Add" button to add tasks, and a ListView to display tasks. We use data binding to connect the ListView to the Description property of the Task class.

Step 5: Implement Functionality in C#

Implement the functionality of your application using C#. Here's a basic structure for the code:

csharp
Copy code
using System.Windows;
using ToDoListApp.Models;

namespace ToDoListApp
{
    public partial class MainWindow : Window
    {
        private TaskManager taskManager = new TaskManager();

        public MainWindow()
        {
            InitializeComponent();
            taskListView.ItemsSource = taskManager.Tasks;
        }

        private void AddTask_Click(object sender, RoutedEventArgs e)
        {
            string description = taskTextBox.Text.Trim();
            if (!string.IsNullOrEmpty(description))
            {
                taskManager.Tasks.Add(new Task { Description = description });
                taskTextBox.Clear();
            }
        }
    }
}
In this code, we initialize the taskManager and set the ItemsSource of the taskListView to the Tasks collection. When the "Add" button is clicked, a new task is added to the collection.

Step 6: Build and Run the Application

Save your changes.

Build the project by clicking "Build" > "Build Solution" in Visual Studio.

Run the application by clicking "Start" or pressing F5.

Step 7: Testing and Usage

Test your to-do list application to ensure that data binding works as expected. Add tasks, and you should see them appear in the list. You can also interactively edit or delete tasks.

Step 8: Documentation

Add comments to your XAML and C# code to explain how data binding is implemented.

Step 9: Create a README File

Create a README file (e.g., README.txt or README.md) in your project folder and provide instructions on how to run the WPF application and how to use its features.

Step 10: Submission

Compile your project into a zip file containing the complete WPF project, including all XAML and C# source code, the data source initialization code, and the README file. Submit this zip file for your assignment.

That's it! You've created a WPF to-do list application that demonstrates data binding, allowing users to interactively manage tasks.