Working with Arrays and Lists

Objective: Learn to work with arrays and lists in the .NET Framework.

Task: In this assignment, you will explore the basics of working with arrays and generic lists (List<T>) in C# within the .NET Framework. Your objective is to write two C# programs:

Part 1: Arrays

Create a C# program that demonstrates the creation and manipulation of arrays. The program should include the following elements:
Initialization of an integer array with a predefined set of values.
Addition of new elements to the array.
Removal of elements from the array.
Iteration through array elements to display their values.
Part 2: Generic Lists (List<T>)
2. Write another C# program that focuses on working with generic lists (List<T>). The program should perform the following operations:

Creation of a generic list (e.g., List<int>) and initialization with a predefined set of values.
Addition of new elements to the list.
Removal of elements from the list.
Searching for elements within the list (e.g., finding the index of a specific element).
Requirements:

Ensure that both programs are well-documented and easy to understand.
Use appropriate comments to explain each section of code.
Include clear and informative output to demonstrate the results of each operation.
Example Explanation:

Part 1: Arrays


using System;

class ArrayDemo
{
    static void Main()
    {
        // Initialize an integer array with predefined values
        int[] numbers = { 1, 2, 3, 4, 5 };

        // Add a new element to the array
        int[] updatedNumbers = new int[numbers.Length + 1];
        Array.Copy(numbers, updatedNumbers, numbers.Length);
        updatedNumbers[numbers.Length] = 6;

        // Display the updated array
        Console.WriteLine("Updated Array:");
        foreach (var number in updatedNumbers)
        {
            Console.WriteLine(number);
        }

        // Remove an element from the array
        int elementToRemove = 3;
        updatedNumbers = RemoveElementFromArray(updatedNumbers, elementToRemove);

        // Display the array after removal
        Console.WriteLine("\nArray after removing element {0}:", elementToRemove);
        foreach (var number in updatedNumbers)
        {
            Console.WriteLine(number);
        }
    }

    // Helper method to remove an element from an array
    static int[] RemoveElementFromArray(int[] array, int elementToRemove)
    {
        int[] result = new int[array.Length - 1];
        int index = 0;
        foreach (var number in array)
        {
            if (number != elementToRemove)
            {
                result[index] = number;
                index++;
            }
        }
        return result;
    }
}


Part 2: Generic Lists (List<T>)


using System;
using System.Collections.Generic;

class ListDemo
{
    static void Main()
    {
        // Initialize a generic list with predefined values
        List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };

        // Add a new element to the list
        numbers.Add(6);

        // Display the updated list
        Console.WriteLine("Updated List:");
        foreach (var number in numbers)
        {
            Console.WriteLine(number);
        }

        // Remove an element from the list
        int elementToRemove = 3;
        numbers.Remove(elementToRemove);

        // Display the list after removal
        Console.WriteLine("\nList after removing element {0}:", elementToRemove);
        foreach (var number in numbers)
        {
            Console.WriteLine(number);
        }

        // Search for an element in the list
        int elementToSearch = 5;
        int indexOfElement = numbers.IndexOf(elementToSearch);

        if (indexOfElement != -1)
        {
            Console.WriteLine("\nElement {0} found at index {1}.", elementToSearch, indexOfElement);
        }
        else
        {
            Console.WriteLine("\nElement {0} not found in the list.", elementToSearch);
        }
    }
}



Submission: Submit the C# source code files for both parts of the assignment along with a brief explanation of the code and the output generated by each program.

Grading Criteria:

Correct implementation of array and list operations.
Proper documentation and comments in the code.
Accuracy and clarity of program output.
Adherence to best practices in C# programming.